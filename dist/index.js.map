{"version":3,"sources":["errors.js","index.js"],"names":["ERRORS","type","value","Error","duplicateKey","doesNotExist","key","id","webDB","get","storageObject","JSON","parse","localStorage","getItem","Object","keys","includes","set","item","undefined","setItem","stringify","remove"],"mappings":";AAMeA,aAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EANf,IAAMA,EAAS,CACbC,KAAM,SAACC,GAAU,OAAA,IAAIC,MAA4ED,+DAAAA,OAAAA,EAAAA,MACjGE,aAAc,SAACF,GAAU,OAAA,IAAIC,MAAmED,6DAAAA,OAAAA,KAChGG,aAAc,SAACH,GAAU,OAAA,IAAIC,MAAiBD,WAAAA,OAAAA,EAAMI,IAAyBJ,uBAAAA,OAAAA,EAAMK,OAGtEP,EAAAA,EAAAA,QAAAA,QAAAA;;AC8BAQ,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,OAAAA,QAAAA,IAAAA,QAAAA,SAAAA,EApCf,IAAA,EAAA,EAAA,QAAA,gBAoCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GA1Bf,IAAMC,EAAM,SAACF,EAAID,GACTI,IAAAA,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQP,IAClD,IAACQ,OAAOC,KAAKN,GAAeO,SAASX,GAAM,MAAMN,EAAOK,QAAAA,aAAa,CAAEE,GAAAA,EAAID,IAAAA,IACxEI,OAAAA,EAAcJ,IAuBRE,QAAAA,IAAAA,EArBf,IAAMU,EAAM,SAACX,EAAID,EAAKa,GAChB,MAACC,EAAW,MAAMH,SAASJ,aAAaC,QAAQP,KAAMM,aAAaQ,QAAQd,EAAII,KAAKW,UAAU,KAC5FZ,IAAAA,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQP,IAClDQ,OAAOC,KAAKN,GAAeO,SAASX,WAAaI,EAAcJ,GACnEI,EAAcJ,GAAOa,EACrBN,aAAaQ,QAAQd,EAAII,KAAKW,UAAUZ,KAgB3BF,QAAAA,IAAAA,EAdf,IAAMe,EAAS,SAAChB,EAAID,GACZI,IAAAA,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQP,WAC/CG,EAAcJ,GACrBO,aAAaQ,QAAQf,EAAKK,KAAKW,UAAUZ,KAW5BF,QAAAA,OAAAA,EARf,IAAMA,EAAQ,CACZC,IAAAA,EACAS,IAAAA,EACAK,OAAAA,GAKaf,EAAAA,EAAAA,QAAAA,QAAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["const ERRORS = {\n  type: (value) => new Error(`Stored value must be a Number, String, Array or Object, got ${typeof value}`),\n  duplicateKey: (value) => new Error(`Keys used on object instance in LS must be unique, check: ${value}`),\n  doesNotExist: (value) => new Error(`The key ${value.key} does not exist in ${value.id}`)\n}\n\nexport default ERRORS\n","import ERRORS from './errors.js'\n\n// const interactWithLocalStorage = (...parameters) => {\n//   const [action, value] = parameters\n//   if (['string', 'array', 'object', 'boolean', 'number'].includes(typeof value)) {\n//     localStorage(action, value)\n//   } else {\n//     throw ERRORS.type(value)\n//   }\n// }\nconst get = (id, key) => {\n  const storageObject = JSON.parse(localStorage.getItem(id))\n  if (!Object.keys(storageObject).includes(key)) throw ERRORS.doesNotExist({ id, key })\n  return storageObject[key]\n}\nconst set = (id, key, item) => {\n  if ([undefined, null].includes(localStorage.getItem(id))) localStorage.setItem(id, JSON.stringify({}))\n  const storageObject = JSON.parse(localStorage.getItem(id))\n  if (Object.keys(storageObject).includes(key)) delete storageObject[key]\n  storageObject[key] = item\n  localStorage.setItem(id, JSON.stringify(storageObject))\n}\nconst remove = (id, key) => {\n  const storageObject = JSON.parse(localStorage.getItem(id))\n  delete storageObject[key]\n  localStorage.setItem(key, JSON.stringify(storageObject))\n}\n\nconst webDB = {\n  get,\n  set,\n  remove\n}\n\nexport { set, get, remove }\n\nexport default webDB\n"]}