{"id":"errors.js","dependencies":[{"name":"/Users/derekgilberrt/code/.babelrc","includedInParent":true,"mtime":1581547100732},{"name":"/Users/derekgilberrt/code/experiments/webDB/package.json","includedInParent":true,"mtime":1581743732530}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar ERRORS = {\n  type: function type(value) {\n    return new Error(\"Stored value must be a Number, String, Array or Object, got \".concat(_typeof(value)));\n  },\n  duplicateKey: function duplicateKey(value) {\n    return new Error(\"Keys used on object instance in LS must be unique, check: \".concat(value));\n  },\n  doesNotExist: function doesNotExist(value) {\n    return new Error(\"The key \".concat(value.key, \" does not exist in \").concat(value.id));\n  }\n};\nvar _default = ERRORS;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":10,"column":0},"source":"errors.js","original":{"line":1,"column":0}},{"name":"ERRORS","generated":{"line":10,"column":4},"source":"errors.js","original":{"line":1,"column":6}},{"generated":{"line":10,"column":10},"source":"errors.js","original":{"line":1,"column":12}},{"generated":{"line":10,"column":13},"source":"errors.js","original":{"line":1,"column":15}},{"name":"type","generated":{"line":11,"column":0},"source":"errors.js","original":{"line":2,"column":2}},{"name":"type","generated":{"line":11,"column":2},"source":"errors.js","original":{"line":2,"column":2}},{"generated":{"line":11,"column":6},"source":"errors.js","original":{"line":2,"column":6}},{"generated":{"line":11,"column":8},"source":"errors.js","original":{"line":2,"column":8}},{"name":"value","generated":{"line":11,"column":22},"source":"errors.js","original":{"line":2,"column":9}},{"generated":{"line":11,"column":27},"source":"errors.js","original":{"line":2,"column":8}},{"generated":{"line":12,"column":0},"source":"errors.js","original":{"line":2,"column":8}},{"generated":{"line":12,"column":11},"source":"errors.js","original":{"line":2,"column":19}},{"name":"Error","generated":{"line":12,"column":15},"source":"errors.js","original":{"line":2,"column":23}},{"generated":{"line":12,"column":20},"source":"errors.js","original":{"line":2,"column":19}},{"name":"value","generated":{"line":12,"column":99},"source":"errors.js","original":{"line":2,"column":99}},{"generated":{"line":12,"column":104},"source":"errors.js","original":{"line":2,"column":19}},{"generated":{"line":12,"column":107},"source":"errors.js","original":{"line":2,"column":8}},{"generated":{"line":13,"column":0},"source":"errors.js","original":{"line":2,"column":8}},{"generated":{"line":13,"column":3},"source":"errors.js","original":{"line":1,"column":15}},{"name":"duplicateKey","generated":{"line":14,"column":0},"source":"errors.js","original":{"line":3,"column":2}},{"name":"duplicateKey","generated":{"line":14,"column":2},"source":"errors.js","original":{"line":3,"column":2}},{"generated":{"line":14,"column":14},"source":"errors.js","original":{"line":3,"column":14}},{"generated":{"line":14,"column":16},"source":"errors.js","original":{"line":3,"column":16}},{"name":"value","generated":{"line":14,"column":38},"source":"errors.js","original":{"line":3,"column":17}},{"generated":{"line":14,"column":43},"source":"errors.js","original":{"line":3,"column":16}},{"generated":{"line":15,"column":0},"source":"errors.js","original":{"line":3,"column":16}},{"generated":{"line":15,"column":11},"source":"errors.js","original":{"line":3,"column":27}},{"name":"Error","generated":{"line":15,"column":15},"source":"errors.js","original":{"line":3,"column":31}},{"generated":{"line":15,"column":20},"source":"errors.js","original":{"line":3,"column":27}},{"name":"value","generated":{"line":15,"column":89},"source":"errors.js","original":{"line":3,"column":98}},{"generated":{"line":15,"column":94},"source":"errors.js","original":{"line":3,"column":27}},{"generated":{"line":15,"column":96},"source":"errors.js","original":{"line":3,"column":16}},{"generated":{"line":16,"column":0},"source":"errors.js","original":{"line":3,"column":16}},{"generated":{"line":16,"column":3},"source":"errors.js","original":{"line":1,"column":15}},{"name":"doesNotExist","generated":{"line":17,"column":0},"source":"errors.js","original":{"line":4,"column":2}},{"name":"doesNotExist","generated":{"line":17,"column":2},"source":"errors.js","original":{"line":4,"column":2}},{"generated":{"line":17,"column":14},"source":"errors.js","original":{"line":4,"column":14}},{"generated":{"line":17,"column":16},"source":"errors.js","original":{"line":4,"column":16}},{"name":"value","generated":{"line":17,"column":38},"source":"errors.js","original":{"line":4,"column":17}},{"generated":{"line":17,"column":43},"source":"errors.js","original":{"line":4,"column":16}},{"generated":{"line":18,"column":0},"source":"errors.js","original":{"line":4,"column":16}},{"generated":{"line":18,"column":11},"source":"errors.js","original":{"line":4,"column":27}},{"name":"Error","generated":{"line":18,"column":15},"source":"errors.js","original":{"line":4,"column":31}},{"generated":{"line":18,"column":20},"source":"errors.js","original":{"line":4,"column":27}},{"name":"value","generated":{"line":18,"column":39},"source":"errors.js","original":{"line":4,"column":48}},{"generated":{"line":18,"column":44},"source":"errors.js","original":{"line":4,"column":53}},{"name":"key","generated":{"line":18,"column":45},"source":"errors.js","original":{"line":4,"column":54}},{"generated":{"line":18,"column":48},"source":"errors.js","original":{"line":4,"column":27}},{"name":"value","generated":{"line":18,"column":80},"source":"errors.js","original":{"line":4,"column":79}},{"generated":{"line":18,"column":85},"source":"errors.js","original":{"line":4,"column":84}},{"name":"id","generated":{"line":18,"column":86},"source":"errors.js","original":{"line":4,"column":85}},{"generated":{"line":18,"column":88},"source":"errors.js","original":{"line":4,"column":27}},{"generated":{"line":18,"column":90},"source":"errors.js","original":{"line":4,"column":16}},{"generated":{"line":19,"column":0},"source":"errors.js","original":{"line":4,"column":16}},{"generated":{"line":20,"column":0},"source":"errors.js","original":{"line":1,"column":15}},{"generated":{"line":20,"column":1},"source":"errors.js","original":{"line":1,"column":0}},{"name":"ERRORS","generated":{"line":21,"column":15},"source":"errors.js","original":{"line":7,"column":15}}],"sources":{"errors.js":"const ERRORS = {\n  type: (value) => new Error(`Stored value must be a Number, String, Array or Object, got ${typeof value}`),\n  duplicateKey: (value) => new Error(`Keys used on object instance in LS must be unique, check: ${value}`),\n  doesNotExist: (value) => new Error(`The key ${value.key} does not exist in ${value.id}`)\n}\n\nexport default ERRORS\n"},"lineCount":null}},"error":null,"hash":"19d10d38de95f6b2eaa6bccc49d2582e","cacheData":{"env":{}}}